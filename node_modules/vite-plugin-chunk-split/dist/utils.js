"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveEntry = exports.isWindows = exports.normalizePath = exports.slash = void 0;
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const dynamicImport = new Function("m", "return import(m)");
function slash(p) {
    return p.replace(/\\/g, "/");
}
exports.slash = slash;
function normalizePath(id) {
    let key = path_1.default.posix.normalize(exports.isWindows ? slash(id) : id);
    if (key.charCodeAt(0) === 0) {
        key = key.substring(1);
    }
    return key;
}
exports.normalizePath = normalizePath;
exports.isWindows = os_1.default.platform() === "win32";
function resolveEntry(name, root) {
    return __awaiter(this, void 0, void 0, function* () {
        const { resolvePackageEntry, resolvePackageData } = yield dynamicImport('vite');
        return resolvePackageEntry(name, resolvePackageData(name, root, true), true, {
            isBuild: true,
            isProduction: process.env.NODE_ENV === "production",
            isRequire: false,
            root,
            preserveSymlinks: false,
            mainFields: [],
            conditions: [],
            // extensions: []
        });
    });
}
exports.resolveEntry = resolveEntry;
//# sourceMappingURL=utils.js.map